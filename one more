// README.md

# Nansen Liquidity Tool Project

This project consists of a Backend and Frontend to display token inflows and outflows in real-time using SSE and React.

---

## 1. Push the Project to GitHub

1. Create a new repository on GitHub, for example: `nansen-liquidity-tool`.
2. Open your terminal in the local project folder:

```bash
# Initialize Git
 git init

# Add all files
git add .

# First commit
git commit -m "Initial commit"

# Link to your GitHub repository
git remote add origin https://github.com/<username>/nansen-liquidity-tool.git

# Push the files
git branch -M main
git push -u origin main
```

> Replace `<username>` with your GitHub username.

---

## 2. Deploy to Render (Working Method for Monorepo)

To avoid Root Directory issues, deploy the **entire project root** and include both `frontend` and `backend`. We'll handle frontend build and backend start with a single Render service.

### Steps:

1. Ensure the project structure is like this:
```
project-root/
 ├─ backend/
 │   ├─ package.json
 │   └─ server.js
 ├─ frontend/
 │   ├─ package.json
 │   └─ src/
 └─ README.md
```

2. Render Configuration:
- **Root Directory:** `/` (project root)
- **Build Command:**
```bash
# Build frontend
cd frontend && npm install && npm run build

# Copy build to backend
mkdir -p backend/public
cp -r dist/* ../backend/public

# Install backend dependencies
cd ../backend && npm install
```
- **Start Command:**
```bash
cd backend && node server.js
```
- **Node Version:** 20 or compatible

> This ensures Render sees a valid package.json in `backend` and the frontend is served statically from `backend/public`.

3. Push all changes to GitHub.
4. Create the web service on Render and select the repository.
5. After deployment, Render provides a live link like:
```
https://your-service-name.onrender.com
```

---

## 3. Run the Project Locally

### Backend:
```bash
cd backend
npm install
node server.js
```

### Frontend (for development):
```bash
cd frontend
npm install
npm run dev
```
Open your browser at:
```
http://localhost:3000
```

---

## 4. Notes
- Replace the placeholder API with the real Nansen endpoint.
- `fetchTokenFlows` can be modified to handle actual JSON data from Nansen.
- SSE updates the UI in real-time.

---

This method ensures Render can successfully build the project without missing Root Directory or package.json errors by deploying from the project root and copying frontend build into backend.
