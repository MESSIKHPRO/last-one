// README.md

# Nansen Liquidity Tool Project

This project consists of a Backend and Frontend to display token inflows and outflows in real-time using SSE and React.

---

## 1. Push the Project to GitHub

1. Create a new repository on GitHub, for example: `nansen-liquidity-tool`.
2. Open your terminal in the local project folder:

```bash
# Initialize Git
 git init

# Add all files
git add .

# First commit
git commit -m "Initial commit"

# Link to your GitHub repository
git remote add origin https://github.com/<username>/nansen-liquidity-tool.git

# Push the files
git branch -M main
git push -u origin main
```

> Replace `<username>` with your GitHub username.

---

## 2. Deploy to Render (Reliable Method)

Render cannot handle a space-separated path for Root Directory. To fix this, we must **deploy only the backend** and serve the frontend build statically from the backend.

### Steps:

1. Build the frontend locally:
```bash
cd frontend
npm install
npm run build
```
2. Move the build to the backend folder:
```bash
mkdir -p backend/public
cp -r dist/* backend/public/
```
3. Adjust `backend/server.js` to serve static files from `public`:
```js
app.use(express.static(path.join(__dirname, 'public')));
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public/index.html'));
});
```
4. Push the changes to GitHub.

### Render Configuration:
- **Root Directory:** `backend`
- **Build Command:** `npm install`
- **Start Command:** `node server.js`
- **Node Version:** 20 or compatible

After Render builds the service, it will provide a live link like:
```
https://your-service-name.onrender.com
```

This method avoids Root Directory issues and missing package.json errors.

---

## 3. Run the Project Locally

### Backend:
```bash
cd backend
npm install
node server.js
```
### Frontend (for development):
```bash
cd frontend
npm install
npm run dev
```
Open your browser at:
```
http://localhost:3000
```

---

## 4. Notes
- Replace the placeholder API with the real Nansen endpoint.
- `fetchTokenFlows` can be modified to handle actual JSON data from Nansen.
- SSE updates the UI in real-time.

---

This approach ensures Render can build and serve the project successfully without Root Directory errors.
